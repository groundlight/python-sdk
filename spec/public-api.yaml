openapi: 3.0.3
info:
  title: Groundlight API
  version: 0.6.0
  description: Easy Computer Vision powered by Natural Language
  contact:
    name: Questions?
    email: support@groundlight.ai
paths:
  /me:
    get:
      operationId: Who am I
      description: Retrieve the current user.
      tags:
        - user
      security:
        - ApiToken: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
  /v1/actions/rules:
    get:
      operationId: List rules
      description: Retrieve a list of rules.
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: page_size
          required: false
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      tags:
        - rules
      security:
        - ApiToken: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRuleList"
          description: ""
  /v1/actions/rules/{id}:
    get:
      operationId: Get rule
      description: Retrieve a rule
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Get a rule by its ID.
          required: true
      tags:
        - rules
      security:
        - ApiToken: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rule"
          description: ""
    delete:
      operationId: Delete rule
      description: Delete a rule
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Delete a rule by its ID.
          required: true
      tags:
        - rules
      security:
        - ApiToken: []
      responses:
        "204":
          description: ""
  /v1/actions/detector/{detector_id}/rules:
    post:
      operationId: Create rule
      description: Create a new rule for a detector.
      parameters:
        - in: path
          name: detector_id
          schema:
            type: string
          description: Choose a detector by its ID.
          required: true
      tags:
        - rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleCreationInput"
        required: true
      security:
        - ApiToken: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rule"
          description: ""
  /v1/notes:
    get:
      operationId: get notes
      description: Retrieve notes for a detector
      parameters:
        - name: detector_id
          required: true
          in: query
          description: the detector whose notes to retrieve
          schema:
            type: string
      tags:
        - notes
      security:
        - ApiToken: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  CUSTOMER:
                    type: array
                    items:
                      $ref: "#/components/schemas/Note"
                  GL:
                    type: array
                    items:
                      $ref: "#/components/schemas/Note"
                required:
                  - CUSTOMER
                  - GL
          description: ""
    post:
      operationId: Create note
      description: Create a new note.
      parameters:
        - name: detector_id
          required: true
          in: query
          description: the detector to associate the note with
          schema:
            type: string
      tags:
        - notes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NoteCreationInput"
        required: true
      security:
        - ApiToken: []
      responses:
        "201":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"
          description: ""
  /v1/detectors:
    get:
      operationId: List detectors
      description: Retrieve a list of detectors.
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: page_size
          required: false
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      tags:
        - detectors
      security:
        - ApiToken: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedDetectorList"
          description: ""
    post:
      operationId: Create detector
      description: Create a new detector.
      tags:
        - detectors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DetectorCreationInput"
        required: true
      security:
        - ApiToken: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Detector"
          description: ""
  /v1/detectors/{id}:
    get:
      operationId: Get detector
      description: Retrieve a detector by its ID.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Choose a detector by its ID.
          required: true
      tags:
        - detectors
      security:
        - ApiToken: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Detector"
          description: ""
  /v1/image-queries:
    get:
      operationId: List image queries
      description: Retrieve a list of image-queries.
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: page_size
          required: false
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      tags:
        - image-queries
      security:
        - ApiToken: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedImageQueryList"
          description: ""
    post:
      operationId: Submit image query
      description: |2+

        Submit an image query against a detector.

        You must use `"Content-Type: image/jpeg"` for the image data. For example:

        ```Bash
        $ curl https://api.groundlight.ai/device-api/v1/image-queries?detector_id=det_abc123 \
            --header "Content-Type: image/jpeg" \
            --data-binary @path/to/filename.jpeg
        ```

      parameters:
        - in: query
          name: detector_id
          schema:
            type: string
          description: Choose a detector by its ID.
          required: true
        - in: query
          name: inspection_id
          schema:
            type: string
          description: Associate the image query with an inspection.
        - in: query
          name: human_review
          schema:
            type: string
          description: >
            If set to `DEFAULT`, use the regular escalation logic (i.e., send the image query for human review if the ML model is not confident).
            If set to `ALWAYS`, always send the image query for human review even if the ML model is confident.
            If set to `NEVER`, never send the image query for human review even if the ML model is not confident.
          required: false
        - in: query
          name: patience_time
          schema:
            type: number
            format: float
          description: How long to wait for a confident response.
          required: false
        - in: query
          name: want_async
          schema:
            type: string
          description: If "true" then submitting an image query returns immediately without a result. The result will be computed asynchronously and can be retrieved later.
        - in: query
          name: metadata
          schema:
            type: string
          required: false
          description:
            A dictionary of custom key/value metadata to associate with the image
            query (limited to 1KB).
      tags:
        - image-queries
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
            examples:
              JPEGBinaryImageData:
                value: "@path/to/image.jpeg"
                summary: JPEG binary image data
      security:
        - ApiToken: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageQuery"
          description: ""
  /v1/image-queries/{id}:
    get:
      operationId: Get image query
      description: Retrieve an image-query by its ID.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Choose an image query by its ID.
          required: true
      tags:
        - image-queries
      security:
        - ApiToken: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageQuery"
          description: ""
  /v1/image-queries/{id}/image:
    get:
      operationId: Get image
      description: Retrieve an image by its image query id.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Choose an image by its image query id.
          required: true
      tags:
        - images
      security:
        - ApiToken: []
      responses:
        "200":
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
          description: ""
components:
  schemas:
    User:
      type: object
      description: Spec for serializing a user object in the public API
      properties:
        username:
          type: string
          description: The user's username.
      required:
        - username
    ClassificationResult:
      type: object
      description:
        Our classification result. This result can come from the detector,
        or a human reviewer.
      properties:
        confidence:
          type: number
          maximum: 1
          minimum: 0
          nullable: true
          description:
            On a scale of 0 to 1, how confident are we in the predicted
            label?
        label:
          type: string
          description: What is the predicted label?
      required:
        - label
      x-internal: true
    Detector:
      type: object
      description: Spec for serializing a detector object in the public API.
      properties:
        id:
          type: string
          readOnly: true
          description: A unique ID for this object.
        type:
          allOf:
            - $ref: "#/components/schemas/DetectorTypeEnum"
          readOnly: true
          description: The type of this object.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: When this detector was created.
        name:
          type: string
          description: A short, descriptive name for the detector.
          maxLength: 200
        query:
          type: string
          readOnly: true
          description: A question about the image.
        group_name:
          type: string
          readOnly: true
          description: Which group should this detector be part of?
        confidence_threshold:
          type: number
          format: double
          maximum: 1.0
          minimum: 0.0
          default: 0.9
          description:
            If the detector's prediction is below this confidence threshold,
            send the image query for human review.
        metadata:
          type: object
          nullable: true
          description:
            A dictionary of custom key/value metadata to associate with the detector
            (limited to 1KB). This is encoded as a URL-safe, base64-encoded JSON string.
      required:
        - created_at
        - group_name
        - id
        - name
        - query
        - type
      x-internal: true
    DetectorCreationInput:
      type: object
      description: Helper serializer for validating POST /detectors input.
      properties:
        name:
          type: string
          description: A short, descriptive name for the detector.
          maxLength: 200
        query:
          type: string
          description: A question about the image.
          maxLength: 300
        group_name:
          type: string
          description: Which group should this detector be part of?
          maxLength: 100
        confidence_threshold:
          type: number
          format: double
          maximum: 1.0
          minimum: 0.0
          default: 0.9
          description:
            If the detector's prediction is below this confidence threshold,
            send the image query for human review.
        pipeline_config:
          type: string
          nullable: true
          description: (Advanced usage) Configuration to instantiate a specific prediction pipeline.
          maxLength: 8192
        metadata:
          type: string
          nullable: true
          description:
            A dictionary of custom key/value metadata to associate with the detector
            (limited to 1KB). This is encoded as a URL-safe, base64-encoded JSON string.
      required:
        # TODO: make name optional - that's how the web version is going.
        - name
        - query
      x-internal: true
    DetectorTypeEnum:
      enum:
        - detector
      type: string
    RuleBase:
      type: object
      description: Base spec for serializing a rule object in the public API.
      properties:
        detector_id:
          type: string
          description: Which detector should this rule be associated with?
        name:
          type: string
          description: A short, descriptive name for the rule.
          maxLength: 200
        enabled:
          type: boolean
          default: true
          description: Is this rule enabled?
        snooze_time_enabled:
          type: boolean
          default: false
          description: Is this rule snooze time enabled?
        snooze_time_value:
          type: integer
          default: 1
          description: How long to snooze the rule for (in seconds).
        snooze_time_unit:
          type: string
          default: "DAYS"
          enum:
            - "SECONDS"
            - "MINUTES"
            - "HOURS"
            - "DAYS"
          description: What unit of time to use for the snooze time.
        action:
          $ref: "#/components/schemas/Action"
          description: What action should be taken when the rule is triggered?
        condition:
          $ref: "#/components/schemas/Condition"
          description: What condition should trigger the rule?
      x-internal: true
    RuleCreationInput:
      type: object
      description: Helper serializer for structuring POST request to actions
      allOf:
        - $ref: "#/components/schemas/RuleBase"
      x-internal: true
    Rule:
      type: object
      description: Spec for serializing a rule object in the public API.
      allOf:
        - $ref: "#/components/schemas/RuleBase"
      properties:
        id:
          type: integer
          readOnly: true
          description: A unique ID for this object.
        detector_name:
          type: string
          readOnly: true
          description: The name of the detector this rule is associated with.
      x-internal: true
    Action:
      type: object
      description: What action should be taken when the rule is triggered?
      properties:
        channel:
          type: string
          enum:
            - EMAIL
            - TEXT
          description: The channel to send the action to.
        include_image:
          type: boolean
          description: Should the image be included in the action?
        recipient:
          type: string
          description: The recipient of the action.
      x-internal: true
    Note:
      type: object
      properties:
        content:
          type: string
          description: The text inside the note
        note_type:
          type: string
          enum:
            - "CUSTOMER"
            - "GL"
          description: The type of note
    NoteCreationInput:
      type: object
      properties:
        content:
          type: string
          description: The text inside the note
      required:
        - content
        - detector_id
    Condition:
      type: object
      description: What condition should trigger the rule?
      properties:
        verb:
          type: string
          enum:
            - "ANSWERED_CONSECUTIVELY"
            - "ANSWERED_WITHIN_TIME"
            - "CHANGED_TO"
            - "NO_CHANGE"
            - "NO_QUERIES"
          description: The verb to use in the condition.
        parameters:
          type: object
          description: The parameters to use in the condition.
      x-internal: true
    ImageQuery:
      type: object
      description: Spec for serializing a image-query object in the public API.
      properties:
        id:
          type: string
          readOnly: true
          description: A unique ID for this object.
        type:
          allOf:
            - $ref: "#/components/schemas/ImageQueryTypeEnum"
          readOnly: true
          description: The type of this object.
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: When was this detector created?
        query:
          type: string
          readOnly: true
          description: A question about the image.
        detector_id:
          type: string
          readOnly: true
          description: Which detector was used on this image query?
        result_type:
          allOf:
            - $ref: "#/components/schemas/ResultTypeEnum"
          readOnly: true
          description: What type of result are we returning?
        result:
          allOf:
            - $ref: "#/components/schemas/ClassificationResult"
          readOnly: true
        metadata:
          type: object
          readOnly: true
          nullable: true
          description:
            A dictionary of custom key/value metadata to associate with the image
            query (limited to 1KB).
      required:
        - created_at
        - detector_id
        - id
        - query
        - result_type
        - type
      x-internal: true
    ImageQueryTypeEnum:
      enum:
        - image_query
      type: string
    PaginatedRuleList:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          nullable: true
          format: uri
        previous:
          type: string
          nullable: true
          format: uri
        results:
          type: array
          items:
            $ref: "#/components/schemas/Rule"
    PaginatedDetectorList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Detector"
    PaginatedImageQueryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/ImageQuery"
    ResultTypeEnum:
      enum:
        - binary_classification
      type: string
  securitySchemes:
    ApiToken:
      name: x-api-token
      type: apiKey
      in: header
servers:
  - url: https://api.groundlight.ai/device-api
    description: Prod
  - url: https://api.integ.groundlight.ai/device-api
    description: Integ
  - url: https://device.positronix.ai/device-api
    description: Device Prod
  - url: https://device.integ.positronix.ai/device-api
    description: Device Integ
