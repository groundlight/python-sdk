"use strict";(self.webpackChunkcode_groundlight_ai=self.webpackChunkcode_groundlight_ai||[]).push([[7815],{8989:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"answer-modes/counting-detectors","title":"Count Detectors","description":"Counting detectors are used to count the number of objects in an image. Groundlight\'s counting detectors also return bounding boxes around the objects they count.","source":"@site/docs/answer-modes/3-counting-detectors.md","sourceDirName":"answer-modes","slug":"/answer-modes/counting-detectors","permalink":"/python-sdk/docs/answer-modes/counting-detectors","draft":false,"unlisted":false,"editUrl":"https://github.com/groundlight/python-sdk/tree/main/docs/docs/answer-modes/3-counting-detectors.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Multiple Choice (Choose One) Detectors","permalink":"/python-sdk/docs/answer-modes/multi-choice-detectors"},"next":{"title":"Guide","permalink":"/python-sdk/docs/guide/"}}');var i=n(4848),r=n(8453);const a={},s="Count Detectors",c={},d=[{value:"Submit an Image Query to a Counting Detector",id:"submit-an-image-query-to-a-counting-detector",level:2},{value:"Add a label to a Counting Detector",id:"add-a-label-to-a-counting-detector",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"count-detectors",children:"Count Detectors"})}),"\n",(0,i.jsx)(t.p,{children:"Counting detectors are used to count the number of objects in an image. Groundlight's counting detectors also return bounding boxes around the objects they count."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:"notest",children:'from groundlight import ExperimentalApi\ngl_exp = ExperimentalApi()\n\n# highlight-start\ndetector = gl_exp.create_counting_detector(\n    name="car-counter",\n    query="How many cars are in the parking lot?",\n    class_name="car",\n    max_count=20,\n    confidence_threshold=0.2,\n)\n# highlight-end\n'})}),"\n",(0,i.jsx)(t.p,{children:'Counting detectors should be provided with a query that asks "how many" objects are in the image.'}),"\n",(0,i.jsxs)(t.p,{children:["A maximum count (of 25 or fewer) must be specified when creating a counting detector. This is the maximum number of objects that the detector will count in an image. Groundlight's ML models are optimized for counting up to 20 objects, but you can increase the maximum count to 25 if needed. If you have an application that requires counting more than 25 objects, please ",(0,i.jsx)(t.a,{href:"mailto:support@groundlight.ai",children:"contact us"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"confidence_threshold"})," parameter sets the minimum confidence level required for the ML model's predictions. If the model's confidence falls below this threshold, the query will be sent for human review. Count detectors can have a ",(0,i.jsx)(t.code,{children:"confidence_threshold"})," set to any value between ",(0,i.jsx)(t.code,{children:"1/(max_count + 2)"})," and 1."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["Counting Detectors are available on ",(0,i.jsx)(t.a,{href:"https://www.groundlight.ai/pricing",children:"Business and Enterprise plans"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"submit-an-image-query-to-a-counting-detector",children:"Submit an Image Query to a Counting Detector"}),"\n",(0,i.jsx)(t.p,{children:"Now that you have created a counting detector, you can submit an image query to it."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:"notest",children:'from groundlight import ExperimentalApi\ngl_exp = ExperimentalApi()\n\ndetector = gl_exp.get_detector_by_name("car-counter")\n\n# highlight-start\n# Count the number of cars in an image\nimage_query = gl_exp.submit_image_query(detector, "path/to/image.jpg")\n# highlight-end\n\nprint(f"Counted {image_query.result.count} cars")\nprint(f"Confidence: {image_query.result.confidence}")\nprint(f"Bounding Boxes: {image_query.rois}")\n'})}),"\n",(0,i.jsxs)(t.p,{children:["In the case of counting detectors, the ",(0,i.jsx)(t.code,{children:"count"})," attribute of the result object will contain the number of objects counted in the image. The ",(0,i.jsx)(t.code,{children:"confidence"})," attribute represents the confidence level in the specific count. Note that this implies that confidences may be lower (on average) for counting detectors with a higher maximum count."]}),"\n",(0,i.jsxs)(t.admonition,{title:"Drawing Bounding Boxes",type:"tip",children:[(0,i.jsx)(t.p,{children:"You can visualize the bounding boxes returned by counting detectors using a library like OpenCV. Here's an example of how to draw bounding boxes on an image:"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:"notest",children:'import cv2\nimport numpy as np\n\ndef draw_bounding_boxes(image_path, rois):\n    """\n    Draw bounding boxes on an image based on ROIs returned from a counting detector.\n\n    Args:\n        image_path: Path to the image file\n        rois: List of ROI objects returned from image_query.rois\n    """\n    image = cv2.imread(image_path)\n    if image is None:\n        raise ValueError(f"Could not read image from {image_path}")\n    height, width = image.shape[:2]\n\n    # Draw bounding boxes\n    for roi in rois:\n        x1 = int(roi.geometry.left * width)\n        y1 = int(roi.geometry.top * height)\n        x2 = int(roi.geometry.right * width)\n        y2 = int(roi.geometry.bottom * height)\n        cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)\n        label_text = f"{roi.label}: {roi.score:.2f}"\n        cv2.putText(image, label_text, (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)\n\n    # Display the image\n    cv2.imshow("Image with Bounding Boxes", image)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n\n# Example usage:\n# image_query = gl.submit_image_query(detector, "path/to/image.jpg")\n# draw_bounding_boxes("path/to/image.jpg", image_query.rois)\n'})})]}),"\n",(0,i.jsx)(t.h2,{id:"add-a-label-to-a-counting-detector",children:"Add a label to a Counting Detector"}),"\n",(0,i.jsx)(t.p,{children:"The Groundlight API allows you to add labels to image queries, including Region of Interest (ROI) data.\nWhen adding a label to a counting detector, if you include ROIs, the number of ROIs should match\nthe count you are labeling."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:"notest",children:'from groundlight import ExperimentalApi\ngl_exp = ExperimentalApi()\n\n# highlight-start\n# Add a count label with corresponding ROIs to the image query from the previous example.\n#   ROIs are specified as (left, top) and (right, bottom) coordinates, with values\n#   between 0 and 1 representing the percentage of the image width and height.\nroi1 = gl_exp.create_roi("car", (0.1, 0.2), (0.2, 0.3))\nroi2 = gl_exp.create_roi("car", (0.4, 0.4), (0.5, 0.6))\nroi3 = gl_exp.create_roi("car", (0.6, 0.5), (0.8, 0.9))\nrois = [roi1, roi2, roi3]\ngl_exp.add_label(image_query, label=len(rois), rois=rois)\n# highlight-end\n'})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var o=n(6540);const i={},r=o.createContext(i);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);