# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, confloat, conint, constr
from groundlight_openapi_client.models.detector_creation_input_request_mode_configuration import (
    DetectorCreationInputRequestModeConfiguration,
)
from groundlight_openapi_client.models.mode_enum import ModeEnum


class DetectorCreationInputRequest(BaseModel):
    """
    Helper serializer for validating POST /detectors input.  # noqa: E501
    """

    name: constr(strict=True, max_length=200, min_length=1) = Field(
        default=..., description="A short, descriptive name for the detector."
    )
    query: constr(strict=True, max_length=300, min_length=1) = Field(
        default=..., description="A question about the image."
    )
    group_name: Optional[constr(strict=True, max_length=100, min_length=1)] = Field(
        default=None, description="Which group should this detector be part of?"
    )
    confidence_threshold: Optional[Union[confloat(le=1.0, ge=0.0, strict=True), conint(le=1, ge=0, strict=True)]] = (
        Field(
            default=0.9,
            description=(
                "If the detector's prediction is below this confidence threshold, send the image query for human"
                " review."
            ),
        )
    )
    patience_time: Optional[Union[confloat(le=3600, ge=0, strict=True), conint(le=3600, ge=0, strict=True)]] = Field(
        default=30.0, description="How long Groundlight will attempt to generate a confident prediction"
    )
    pipeline_config: Optional[constr(strict=True, max_length=100)] = Field(
        default=None, description="(Advanced usage) Configuration needed to instantiate a prediction pipeline."
    )
    metadata: Optional[constr(strict=True, max_length=1362, min_length=1)] = Field(
        default=None,
        description=(
            "Base64-encoded metadata for the detector. This should be a JSON object with string keys. The size after"
            " encoding should not exceed 1362 bytes, corresponding to 1KiB before encoding."
        ),
    )
    mode: Optional[ModeEnum] = Field(
        default=None,
        description=(
            "Mode in which this detector will work.  * `BINARY` - BINARY * `COUNT` - COUNT * `MULTI_CLASS` -"
            " MULTI_CLASS * `TEXT` - TEXT * `BOUNDING_BOX` - BOUNDING_BOX"
        ),
    )
    mode_configuration: Optional[DetectorCreationInputRequestModeConfiguration] = None
    __properties = [
        "name",
        "query",
        "group_name",
        "confidence_threshold",
        "patience_time",
        "pipeline_config",
        "metadata",
        "mode",
        "mode_configuration",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DetectorCreationInputRequest:
        """Create an instance of DetectorCreationInputRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of mode_configuration
        if self.mode_configuration:
            _dict["mode_configuration"] = self.mode_configuration.to_dict()
        # set to None if pipeline_config (nullable) is None
        # and __fields_set__ contains the field
        if self.pipeline_config is None and "pipeline_config" in self.__fields_set__:
            _dict["pipeline_config"] = None

        # set to None if mode_configuration (nullable) is None
        # and __fields_set__ contains the field
        if self.mode_configuration is None and "mode_configuration" in self.__fields_set__:
            _dict["mode_configuration"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DetectorCreationInputRequest:
        """Create an instance of DetectorCreationInputRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DetectorCreationInputRequest.parse_obj(obj)

        _obj = DetectorCreationInputRequest.parse_obj({
            "name": obj.get("name"),
            "query": obj.get("query"),
            "group_name": obj.get("group_name"),
            "confidence_threshold": (
                obj.get("confidence_threshold") if obj.get("confidence_threshold") is not None else 0.9
            ),
            "patience_time": obj.get("patience_time") if obj.get("patience_time") is not None else 30.0,
            "pipeline_config": obj.get("pipeline_config"),
            "metadata": obj.get("metadata"),
            "mode": obj.get("mode"),
            "mode_configuration": (
                DetectorCreationInputRequestModeConfiguration.from_dict(obj.get("mode_configuration"))
                if obj.get("mode_configuration") is not None
                else None
            ),
        })
        return _obj
