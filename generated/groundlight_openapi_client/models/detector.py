# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, constr
from groundlight_openapi_client.models.detector_status import DetectorStatus
from groundlight_openapi_client.models.detector_type_enum import DetectorTypeEnum


class Detector(BaseModel):
    """
    Groundlight Detectors provide answers to natural language questions about images.  Each detector can answer a single question, and multiple detectors can be strung together for more complex logic. Detectors can be created through the create_detector method, or through the create_[MODE]_detector methods for pro tier users  # noqa: E501
    """

    id: StrictStr = Field(default=..., description="A unique ID for this object.")
    type: DetectorTypeEnum = Field(default=..., description="The type of this object.")
    created_at: datetime = Field(default=..., description="When this detector was created.")
    name: constr(strict=True, max_length=200) = Field(
        default=..., description="A short, descriptive name for the detector."
    )
    query: StrictStr = Field(default=..., description="A question about the image.")
    group_name: StrictStr = Field(default=..., description="Which group should this detector be part of?")
    confidence_threshold: Optional[Union[confloat(le=1.0, ge=0.0, strict=True), conint(le=1, ge=0, strict=True)]] = (
        Field(
            default=0.9,
            description=(
                "If the detector's prediction is below this confidence threshold, send the image query for human"
                " review."
            ),
        )
    )
    patience_time: Optional[Union[confloat(le=3600, ge=0, strict=True), conint(le=3600, ge=0, strict=True)]] = Field(
        default=30.0, description="How long Groundlight will attempt to generate a confident prediction"
    )
    metadata: Optional[Dict[str, Any]] = Field(default=..., description="Metadata about the detector.")
    mode: StrictStr = Field(...)
    mode_configuration: Optional[Dict[str, Any]] = Field(...)
    status: Optional[DetectorStatus] = None
    escalation_type: Optional[StrictStr] = None
    __properties = [
        "id",
        "type",
        "created_at",
        "name",
        "query",
        "group_name",
        "confidence_threshold",
        "patience_time",
        "metadata",
        "mode",
        "mode_configuration",
        "status",
        "escalation_type",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Detector:
        """Create an instance of Detector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "id",
                "type",
                "created_at",
                "query",
                "group_name",
                "metadata",
                "mode",
                "mode_configuration",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict["metadata"] = None

        # set to None if mode_configuration (nullable) is None
        # and __fields_set__ contains the field
        if self.mode_configuration is None and "mode_configuration" in self.__fields_set__:
            _dict["mode_configuration"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Detector:
        """Create an instance of Detector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Detector.parse_obj(obj)

        _obj = Detector.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "created_at": obj.get("created_at"),
            "name": obj.get("name"),
            "query": obj.get("query"),
            "group_name": obj.get("group_name"),
            "confidence_threshold": (
                obj.get("confidence_threshold") if obj.get("confidence_threshold") is not None else 0.9
            ),
            "patience_time": obj.get("patience_time") if obj.get("patience_time") is not None else 30.0,
            "metadata": obj.get("metadata"),
            "mode": obj.get("mode"),
            "mode_configuration": obj.get("mode_configuration"),
            "status": DetectorStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "escalation_type": obj.get("escalation_type"),
        })
        return _obj
