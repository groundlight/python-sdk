# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, constr


class PayloadTemplateRequest(BaseModel):
    """
    PayloadTemplateRequest
    """

    template: constr(strict=True, min_length=1) = Field(...)
    headers: Optional[Dict[str, constr(strict=True, min_length=1)]] = None
    __properties = ["template", "headers"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PayloadTemplateRequest:
        """Create an instance of PayloadTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if headers (nullable) is None
        # and __fields_set__ contains the field
        if self.headers is None and "headers" in self.__fields_set__:
            _dict["headers"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PayloadTemplateRequest:
        """Create an instance of PayloadTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PayloadTemplateRequest.parse_obj(obj)

        _obj = PayloadTemplateRequest.parse_obj({"template": obj.get("template"), "headers": obj.get("headers")})
        return _obj
