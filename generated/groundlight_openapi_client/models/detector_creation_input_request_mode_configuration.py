# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from groundlight_openapi_client.models.bounding_box_mode_configuration import BoundingBoxModeConfiguration
from groundlight_openapi_client.models.count_mode_configuration import CountModeConfiguration
from groundlight_openapi_client.models.multi_class_mode_configuration import MultiClassModeConfiguration
from groundlight_openapi_client.models.text_mode_configuration import TextModeConfiguration
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DETECTORCREATIONINPUTREQUESTMODECONFIGURATION_ONE_OF_SCHEMAS = [
    "BoundingBoxModeConfiguration",
    "CountModeConfiguration",
    "MultiClassModeConfiguration",
    "TextModeConfiguration",
]


class DetectorCreationInputRequestModeConfiguration(BaseModel):
    """
    DetectorCreationInputRequestModeConfiguration
    """

    # data type: CountModeConfiguration
    oneof_schema_1_validator: Optional[CountModeConfiguration] = None
    # data type: MultiClassModeConfiguration
    oneof_schema_2_validator: Optional[MultiClassModeConfiguration] = None
    # data type: TextModeConfiguration
    oneof_schema_3_validator: Optional[TextModeConfiguration] = None
    # data type: BoundingBoxModeConfiguration
    oneof_schema_4_validator: Optional[BoundingBoxModeConfiguration] = None
    actual_instance: Optional[
        Union[BoundingBoxModeConfiguration, CountModeConfiguration, MultiClassModeConfiguration, TextModeConfiguration]
    ] = None
    one_of_schemas: Set[str] = {
        "BoundingBoxModeConfiguration",
        "CountModeConfiguration",
        "MultiClassModeConfiguration",
        "TextModeConfiguration",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        if v is None:
            return v

        instance = DetectorCreationInputRequestModeConfiguration.model_construct()
        error_messages = []
        match = 0
        # validate data type: CountModeConfiguration
        if not isinstance(v, CountModeConfiguration):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CountModeConfiguration`")
        else:
            match += 1
        # validate data type: MultiClassModeConfiguration
        if not isinstance(v, MultiClassModeConfiguration):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MultiClassModeConfiguration`")
        else:
            match += 1
        # validate data type: TextModeConfiguration
        if not isinstance(v, TextModeConfiguration):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextModeConfiguration`")
        else:
            match += 1
        # validate data type: BoundingBoxModeConfiguration
        if not isinstance(v, BoundingBoxModeConfiguration):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BoundingBoxModeConfiguration`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in DetectorCreationInputRequestModeConfiguration"
                " with oneOf schemas: BoundingBoxModeConfiguration, CountModeConfiguration,"
                " MultiClassModeConfiguration, TextModeConfiguration. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in DetectorCreationInputRequestModeConfiguration with"
                " oneOf schemas: BoundingBoxModeConfiguration, CountModeConfiguration, MultiClassModeConfiguration,"
                " TextModeConfiguration. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: Optional[str]) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        if json_str is None:
            return instance

        error_messages = []
        match = 0

        # deserialize data into CountModeConfiguration
        try:
            instance.actual_instance = CountModeConfiguration.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MultiClassModeConfiguration
        try:
            instance.actual_instance = MultiClassModeConfiguration.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextModeConfiguration
        try:
            instance.actual_instance = TextModeConfiguration.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BoundingBoxModeConfiguration
        try:
            instance.actual_instance = BoundingBoxModeConfiguration.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into"
                " DetectorCreationInputRequestModeConfiguration with oneOf schemas: BoundingBoxModeConfiguration,"
                " CountModeConfiguration, MultiClassModeConfiguration, TextModeConfiguration. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into DetectorCreationInputRequestModeConfiguration"
                " with oneOf schemas: BoundingBoxModeConfiguration, CountModeConfiguration,"
                " MultiClassModeConfiguration, TextModeConfiguration. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            BoundingBoxModeConfiguration,
            CountModeConfiguration,
            MultiClassModeConfiguration,
            TextModeConfiguration,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
