# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, confloat, conint, constr
from groundlight_openapi_client.models.detector_status import DetectorStatus


class PatchedDetectorRequest(BaseModel):
    """
    Groundlight Detectors provide answers to natural language questions about images.  Each detector can answer a single question, and multiple detectors can be strung together for more complex logic. Detectors can be created through the create_detector method, or through the create_[MODE]_detector methods for pro tier users  # noqa: E501
    """

    name: Optional[constr(strict=True, max_length=200, min_length=1)] = Field(
        default=None, description="A short, descriptive name for the detector."
    )
    confidence_threshold: Optional[Union[confloat(le=1.0, ge=0.0, strict=True), conint(le=1, ge=0, strict=True)]] = (
        Field(
            default=0.9,
            description=(
                "If the detector's prediction is below this confidence threshold, send the image query for human"
                " review."
            ),
        )
    )
    patience_time: Optional[Union[confloat(le=3600, ge=0, strict=True), conint(le=3600, ge=0, strict=True)]] = Field(
        default=30.0, description="How long Groundlight will attempt to generate a confident prediction"
    )
    status: Optional[DetectorStatus] = None
    escalation_type: Optional[constr(strict=True, min_length=1)] = None
    __properties = ["name", "confidence_threshold", "patience_time", "status", "escalation_type"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedDetectorRequest:
        """Create an instance of PatchedDetectorRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedDetectorRequest:
        """Create an instance of PatchedDetectorRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedDetectorRequest.parse_obj(obj)

        _obj = PatchedDetectorRequest.parse_obj({
            "name": obj.get("name"),
            "confidence_threshold": (
                obj.get("confidence_threshold") if obj.get("confidence_threshold") is not None else 0.9
            ),
            "patience_time": obj.get("patience_time") if obj.get("patience_time") is not None else 30.0,
            "status": DetectorStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "escalation_type": obj.get("escalation_type"),
        })
        return _obj
