# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from groundlight_openapi_client.models.get_detector_metrics200_response_summary_class_counts import (
    GetDetectorMetrics200ResponseSummaryClassCounts,
)
from typing import Optional, Set
from typing_extensions import Self


class GetDetectorMetrics200ResponseSummary(BaseModel):
    """
    GetDetectorMetrics200ResponseSummary
    """  # noqa: E501

    num_ground_truth: Optional[StrictInt] = None
    num_current_source_human: Optional[StrictInt] = None
    class_counts: Optional[GetDetectorMetrics200ResponseSummaryClassCounts] = None
    unconfident_counts: Optional[Dict[str, Any]] = None
    total_iqs: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "num_ground_truth",
        "num_current_source_human",
        "class_counts",
        "unconfident_counts",
        "total_iqs",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDetectorMetrics200ResponseSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of class_counts
        if self.class_counts:
            _dict["class_counts"] = self.class_counts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDetectorMetrics200ResponseSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "num_ground_truth": obj.get("num_ground_truth"),
            "num_current_source_human": obj.get("num_current_source_human"),
            "class_counts": (
                GetDetectorMetrics200ResponseSummaryClassCounts.from_dict(obj["class_counts"])
                if obj.get("class_counts") is not None
                else None
            ),
            "unconfident_counts": obj.get("unconfident_counts"),
            "total_iqs": obj.get("total_iqs"),
        })
        return _obj
