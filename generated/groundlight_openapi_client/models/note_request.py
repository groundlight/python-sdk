# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictBytes, StrictStr


class NoteRequest(BaseModel):
    """
    NoteRequest
    """

    content: Optional[StrictStr] = Field(default=None, description="Text content of the note.")
    is_pinned: Optional[StrictBool] = None
    image: Optional[Union[StrictBytes, StrictStr]] = None
    __properties = ["content", "is_pinned", "image"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NoteRequest:
        """Create an instance of NoteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if content (nullable) is None
        # and __fields_set__ contains the field
        if self.content is None and "content" in self.__fields_set__:
            _dict["content"] = None

        # set to None if is_pinned (nullable) is None
        # and __fields_set__ contains the field
        if self.is_pinned is None and "is_pinned" in self.__fields_set__:
            _dict["is_pinned"] = None

        # set to None if image (nullable) is None
        # and __fields_set__ contains the field
        if self.image is None and "image" in self.__fields_set__:
            _dict["image"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NoteRequest:
        """Create an instance of NoteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NoteRequest.parse_obj(obj)

        _obj = NoteRequest.parse_obj(
            {"content": obj.get("content"), "is_pinned": obj.get("is_pinned"), "image": obj.get("image")}
        )
        return _obj
