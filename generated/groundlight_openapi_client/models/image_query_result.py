# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from groundlight_openapi_client.models.binary_classification_result import BinaryClassificationResult
from groundlight_openapi_client.models.bounding_box_result import BoundingBoxResult
from groundlight_openapi_client.models.counting_result import CountingResult
from groundlight_openapi_client.models.multi_classification_result import MultiClassificationResult
from groundlight_openapi_client.models.text_recognition_result import TextRecognitionResult
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

IMAGEQUERYRESULT_ONE_OF_SCHEMAS = [
    "BinaryClassificationResult",
    "BoundingBoxResult",
    "CountingResult",
    "MultiClassificationResult",
    "TextRecognitionResult",
]


class ImageQueryResult(BaseModel):
    """
    ImageQueryResult
    """

    # data type: BinaryClassificationResult
    oneof_schema_1_validator: Optional[BinaryClassificationResult] = None
    # data type: CountingResult
    oneof_schema_2_validator: Optional[CountingResult] = None
    # data type: MultiClassificationResult
    oneof_schema_3_validator: Optional[MultiClassificationResult] = None
    # data type: TextRecognitionResult
    oneof_schema_4_validator: Optional[TextRecognitionResult] = None
    # data type: BoundingBoxResult
    oneof_schema_5_validator: Optional[BoundingBoxResult] = None
    if TYPE_CHECKING:
        actual_instance: Union[
            BinaryClassificationResult,
            BoundingBoxResult,
            CountingResult,
            MultiClassificationResult,
            TextRecognitionResult,
        ]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(IMAGEQUERYRESULT_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        if v is None:
            return v

        instance = ImageQueryResult.construct()
        error_messages = []
        match = 0
        # validate data type: BinaryClassificationResult
        if not isinstance(v, BinaryClassificationResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BinaryClassificationResult`")
        else:
            match += 1
        # validate data type: CountingResult
        if not isinstance(v, CountingResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CountingResult`")
        else:
            match += 1
        # validate data type: MultiClassificationResult
        if not isinstance(v, MultiClassificationResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MultiClassificationResult`")
        else:
            match += 1
        # validate data type: TextRecognitionResult
        if not isinstance(v, TextRecognitionResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextRecognitionResult`")
        else:
            match += 1
        # validate data type: BoundingBoxResult
        if not isinstance(v, BoundingBoxResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BoundingBoxResult`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in ImageQueryResult with oneOf schemas:"
                " BinaryClassificationResult, BoundingBoxResult, CountingResult, MultiClassificationResult,"
                " TextRecognitionResult. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in ImageQueryResult with oneOf schemas:"
                " BinaryClassificationResult, BoundingBoxResult, CountingResult, MultiClassificationResult,"
                " TextRecognitionResult. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ImageQueryResult:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ImageQueryResult:
        """Returns the object represented by the json string"""
        instance = ImageQueryResult.construct()
        if json_str is None:
            return instance

        error_messages = []
        match = 0

        # deserialize data into BinaryClassificationResult
        try:
            instance.actual_instance = BinaryClassificationResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CountingResult
        try:
            instance.actual_instance = CountingResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MultiClassificationResult
        try:
            instance.actual_instance = MultiClassificationResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextRecognitionResult
        try:
            instance.actual_instance = TextRecognitionResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BoundingBoxResult
        try:
            instance.actual_instance = BoundingBoxResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into ImageQueryResult with oneOf schemas:"
                " BinaryClassificationResult, BoundingBoxResult, CountingResult, MultiClassificationResult,"
                " TextRecognitionResult. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into ImageQueryResult with oneOf schemas:"
                " BinaryClassificationResult, BoundingBoxResult, CountingResult, MultiClassificationResult,"
                " TextRecognitionResult. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())
