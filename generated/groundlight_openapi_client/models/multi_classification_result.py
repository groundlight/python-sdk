# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr, confloat, conint, validator


class MultiClassificationResult(BaseModel):
    """
    MultiClassificationResult
    """

    confidence: Optional[Union[confloat(le=1.0, ge=0.0, strict=True), conint(le=1, ge=0, strict=True)]] = None
    source: Optional[StrictStr] = None
    result_type: Optional[StrictStr] = None
    from_edge: Optional[StrictBool] = None
    label: StrictStr = Field(...)
    __properties = ["confidence", "source", "result_type", "from_edge", "label"]

    @validator("result_type")
    def result_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("multi_classification",):
            raise ValueError("must be one of enum values ('multi_classification')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MultiClassificationResult:
        """Create an instance of MultiClassificationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if confidence (nullable) is None
        # and __fields_set__ contains the field
        if self.confidence is None and "confidence" in self.__fields_set__:
            _dict["confidence"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MultiClassificationResult:
        """Create an instance of MultiClassificationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MultiClassificationResult.parse_obj(obj)

        _obj = MultiClassificationResult.parse_obj({
            "confidence": obj.get("confidence"),
            "source": obj.get("source"),
            "result_type": obj.get("result_type"),
            "from_edge": obj.get("from_edge"),
            "label": obj.get("label"),
        })
        return _obj
