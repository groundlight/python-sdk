# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conint, conlist, constr
from groundlight_openapi_client.models.condition_request import ConditionRequest
from groundlight_openapi_client.models.rule_action import RuleAction
from groundlight_openapi_client.models.snooze_time_unit_enum import SnoozeTimeUnitEnum
from groundlight_openapi_client.models.webhook_action_request import WebhookActionRequest


class RuleRequest(BaseModel):
    """
    RuleRequest
    """

    name: constr(strict=True, max_length=44, min_length=1) = Field(...)
    enabled: Optional[StrictBool] = True
    snooze_time_enabled: Optional[StrictBool] = False
    snooze_time_value: Optional[conint(strict=True, ge=0)] = 0
    snooze_time_unit: Optional[SnoozeTimeUnitEnum] = None
    human_review_required: Optional[StrictBool] = False
    condition: ConditionRequest = Field(...)
    action: Optional[RuleAction] = None
    webhook_action: Optional[conlist(WebhookActionRequest)] = None
    __properties = [
        "name",
        "enabled",
        "snooze_time_enabled",
        "snooze_time_value",
        "snooze_time_unit",
        "human_review_required",
        "condition",
        "action",
        "webhook_action",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RuleRequest:
        """Create an instance of RuleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict["condition"] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict["action"] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in webhook_action (list)
        _items = []
        if self.webhook_action:
            for _item in self.webhook_action:
                if _item:
                    _items.append(_item.to_dict())
            _dict["webhook_action"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RuleRequest:
        """Create an instance of RuleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RuleRequest.parse_obj(obj)

        _obj = RuleRequest.parse_obj({
            "name": obj.get("name"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "snooze_time_enabled": (
                obj.get("snooze_time_enabled") if obj.get("snooze_time_enabled") is not None else False
            ),
            "snooze_time_value": obj.get("snooze_time_value") if obj.get("snooze_time_value") is not None else 0,
            "snooze_time_unit": obj.get("snooze_time_unit"),
            "human_review_required": (
                obj.get("human_review_required") if obj.get("human_review_required") is not None else False
            ),
            "condition": ConditionRequest.from_dict(obj.get("condition")) if obj.get("condition") is not None else None,
            "action": RuleAction.from_dict(obj.get("action")) if obj.get("action") is not None else None,
            "webhook_action": (
                [WebhookActionRequest.from_dict(_item) for _item in obj.get("webhook_action")]
                if obj.get("webhook_action") is not None
                else None
            ),
        })
        return _obj
