# coding: utf-8

"""
    Groundlight API

    Groundlight makes it simple to understand images. You can easily create computer vision detectors just by describing what you want to know using natural language.

    The version of the OpenAPI document: 0.18.2
    Contact: support@groundlight.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from groundlight_openapi_client.models.image_query_result import ImageQueryResult
from groundlight_openapi_client.models.image_query_type_enum import ImageQueryTypeEnum
from groundlight_openapi_client.models.result_type_enum import ResultTypeEnum
from groundlight_openapi_client.models.roi import ROI


class ImageQuery(BaseModel):
    """
    ImageQuery objects are the answers to natural language questions about images created by detectors.  # noqa: E501
    """

    metadata: Optional[Dict[str, Any]] = Field(default=..., description="Metadata about the image query.")
    id: StrictStr = Field(default=..., description="A unique ID for this object.")
    type: ImageQueryTypeEnum = Field(default=..., description="The type of this object.")
    created_at: datetime = Field(default=..., description="When was this detector created?")
    query: StrictStr = Field(default=..., description="A question about the image.")
    detector_id: StrictStr = Field(default=..., description="Which detector was used on this image query?")
    result_type: ResultTypeEnum = Field(default=..., description="What type of result are we returning?")
    result: Optional[ImageQueryResult] = Field(...)
    patience_time: Union[StrictFloat, StrictInt] = Field(
        default=..., description="How long to wait for a confident response."
    )
    confidence_threshold: Union[StrictFloat, StrictInt] = Field(
        default=..., description="Min confidence needed to accept the response of the image query."
    )
    rois: Optional[conlist(ROI)] = Field(
        default=..., description="An array of regions of interest (bounding boxes) collected on image"
    )
    text: Optional[StrictStr] = Field(default=..., description="A text field on image query.")
    done_processing: Optional[StrictBool] = Field(
        default=False,
        description="EDGE ONLY - Whether the image query has completed escalating and will receive no new results.",
    )
    __properties = [
        "metadata",
        "id",
        "type",
        "created_at",
        "query",
        "detector_id",
        "result_type",
        "result",
        "patience_time",
        "confidence_threshold",
        "rois",
        "text",
        "done_processing",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImageQuery:
        """Create an instance of ImageQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "metadata",
                "id",
                "type",
                "created_at",
                "query",
                "detector_id",
                "result_type",
                "patience_time",
                "confidence_threshold",
                "rois",
                "text",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict["result"] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rois (list)
        _items = []
        if self.rois:
            for _item in self.rois:
                if _item:
                    _items.append(_item.to_dict())
            _dict["rois"] = _items
        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict["metadata"] = None

        # set to None if result (nullable) is None
        # and __fields_set__ contains the field
        if self.result is None and "result" in self.__fields_set__:
            _dict["result"] = None

        # set to None if rois (nullable) is None
        # and __fields_set__ contains the field
        if self.rois is None and "rois" in self.__fields_set__:
            _dict["rois"] = None

        # set to None if text (nullable) is None
        # and __fields_set__ contains the field
        if self.text is None and "text" in self.__fields_set__:
            _dict["text"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImageQuery:
        """Create an instance of ImageQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImageQuery.parse_obj(obj)

        _obj = ImageQuery.parse_obj({
            "metadata": obj.get("metadata"),
            "id": obj.get("id"),
            "type": obj.get("type"),
            "created_at": obj.get("created_at"),
            "query": obj.get("query"),
            "detector_id": obj.get("detector_id"),
            "result_type": obj.get("result_type"),
            "result": ImageQueryResult.from_dict(obj.get("result")) if obj.get("result") is not None else None,
            "patience_time": obj.get("patience_time"),
            "confidence_threshold": obj.get("confidence_threshold"),
            "rois": [ROI.from_dict(_item) for _item in obj.get("rois")] if obj.get("rois") is not None else None,
            "text": obj.get("text"),
            "done_processing": obj.get("done_processing") if obj.get("done_processing") is not None else False,
        })
        return _obj
